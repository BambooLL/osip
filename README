Project    : "The GNU oSIP library" is an implementation of SIP - rfc2543. 
Last update: 0.8.5
Email      : jack@atosc.org
License    : LGPL (http://www.gnu.org)
Home Page  : http://www.fsf.org/software/osip/osip.html
Download   : ftp://ftp.gnu.org/gnu/osip

"The GNU oSIP library" is part of the "GNU project". You can check
www.fsf.org for more information about being part of the "GNU project".

This is "the GNU oSIP library" (for Omnibus SIP). It has been
designed to provide the Internet Community a simple
way to support the Session Initiation Protocol.
SIP is described in the RFC2543 which is available at
http://www.ietf.org/rfc/rfc2543.txt.


FEATURES: (version 0.8.4)
---------

The oSIP library consists of 2 parts:

PARSER:
  *  SIP URL parser.
  *  SIP message parser. (and accessor API)
  *  SDP message parser. (and accessor API)
  *  MIME support for message with multiple attachments. (not tested)

TRANSACTION LAYER:
  *  2 states machines for "client transaction" (INVITE and other).
  *  2 states machines for "server transaction"
  *  user controls the application with events.
  *  events managed by the oSIP stack are announced through callbacks.
  *  A SDP framework for quick negotiation. (for UAC/UAS only)
  *  dialog handling facility. (for UAC/UAS only)
  *  timers management framework.

EXTRA:
  *  Porting the library is done through the "port_" files.
     keep in mind that you can replace the libraries where
     you find the threads, mutex and semaphore facilities.
     Please redistribute your ports to jack@atosc.org.
  *  oSIP is not tight to any design! You can use the library
     either in a multi-threaded environment or not, use your
     own interruption's mechanism for timer, or use your own
     transport protocol...

Documentation:
--------------

Yet available:
  *  this README file.
  *  ./doc/osip.html: oSIP User Manual (for 0.7.X releases).
	(Under the FDL license)

WARNING: This documentation is up to date for the parser library, but
         is not for the fsm part of oSIP. Main ideas remain unchanged
         but events exchanges between the fsm and the applications layer
         have changed. This was required for being compliant with the
         latest revision of the rfc2543.

Installation procedure:
-----------------------

The library is known to compile on various platform:
  *  GNU/Linux
	(2.2.16, 2.4.7, 2.4.12, 2.4.17 with gcc 2.95.2)
	gcc-3.0.3 from libosip-0.7.8
  *  Windows NT (95, 2000, ???)
        VC++6.0 (?)

Extra set of OS where some version of oSIP has been ported.
  *  Solaris (2.5)
  *  HP-Unix (??) (with a missing -lrt, if I remember)
  *  VxWorks(5.4?). (makefiles removed since version 0.8.1)

*** I Need testers and maintainers for all OS: UNIX/VxWorks/Windows. ***
    write jack@atosc.org if this is of interest to you.


For VxWorks :
============>   VxWorks is no longer supported. If you need it, please
		create and send makefiles to jack@atosc.org

Unix and Linux :
============>

   $>configure
   $>make
   $>make install

I prefer to do:

  $> tar -xvzf libosip-0.X.X.tar.gz
  $> mkdir linux-build
  $> cd linux-build
  $> ../libosip-0.X.X/configure
  $> make
  $> make install

Here is a list of options you can give to the 'configure' command line:

configure --disable-mt             ==> disable any thread support,
flags: "-UOSIP_MT"

configure --disable-debug          ==> disable debug.
flags: "-UENABLE_DEBUG"

configure --disable-trace           ==> disable the trace in the logfile.
flags: "-UENABLE_TRACE"

configure --enable_mleak           ==> enable the memory leak detection.
flags: "-DENABLE_MLEAK"

configure --enable-pth             ==> use GNU pth library. (never tested yet!)
flags: "-DTHREAD_PTH -UTHREAD_PTHREAD"

configure --prefix=/your/local     ==> install in '$prefix' (default is /usr/local)

For Windows :
============>    Makefiles are located in ./windows


Tests programs:
---------------

NOTE: previous release of oSIP was including test applications for the
fsm part (directory ./example and ./example_mt). THIS IS NOT PROVIDED
ANY MORE. Tests will now be made by real applications. I'm actually building
a UA and I'm about to start a proxy. Those are not yet available.

  *  ./test/torture_test: test the SIP parser.
  *  ./test/torture_sdp: test the SDP parser, its accessor API and the
                         framework for negotiation.

  *  ./test/turl      : test the sip-urls parser.
  *  ./test/tto       : test some 'to' fields
  *  ./test/tfrom     : test some 'from' fields
  *  ./test/tcontact  : test some 'contact' fields
  *  ./test/tvia      : test some 'via' fields
  *  ./test/tcallid   : test some 'call-id' fields
  *  ./test/tcontentt : test some 'content-type' fields

How to use the test programs:

  Some SIP and SDP samples are provided in conf/torture_msgs
                                           conf/torture_msgs2
                                           conf/torture_sdps

	./test/torture_test conf/torture_msgs 0
	./test/torture_test conf/torture_msgs 1 -v
	./test/torture_test conf/torture_msgs 3

	./test/torture_sdp conf/torture_sdps 3
	./test/torture_sdp conf/torture_sdps 3 -v

	./test/tcallid conf/callids.txt
	./test/tfrom  conf/froms.txt
	./test/tto conf/tos.txt
	./test/tvia conf/vias.txt
	./test/tcontact conf/contacts.txt
	./test/turl conf/urls.txt


Known issues:
-------------

  *  Lack of thread resources:
        It seems that some Linux distributions includes kernel
        that can't launch a high number of threads. Proxy can
        use heavily multi-threaded architectures thus resulting
        in a high number of threads. If the limit is set to 64
        threads, this will limit the proxy capability.

    The solution for me is to just recompile the kernel. The
    default number of thread is 1024 in the source tree. (as
    far as I know)

Known Limitation:
-----------------

  *  Only main headers are entirely defined:
	Via, To, From, Call-Id, CSeq, Contact,
	Content-Type, Content-Length, mime-version,
	route, record-route, content-encoding, allow,
	error-info, call-info, alert-info, accept-encoding,
	accept-language, accept, proxy-authorization,
	proxy-authenticate, authorization,
	www-authenticate.

	All other SIP headers are considered to be
	strings. (but there are all fully usable
	by the application layer)

        Note that, unknown SIP headers (not defined in the rfc)
        are supported the way "other SIP headers" are. Thus,
        the same API is used.

Contact information:
--------------------

For more information on the SIP stack, or any contributions,
you can contact the author at <jack@atosc.org>.

A Mailing list is available for support: <osip@atosc.org>.
You can subscribe by writing to: <osip-request@atosc.org>
with a subject set to "subscribe".

Latest version is available at:
ftp://ftp.gnu.org/gnu/osip

Home page is located at:
http://www.fsf.org/software/osip/osip.html
