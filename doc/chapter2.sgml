<chapter>
<title>SIP overview</title>
<para>This section does not intend to fully describe the RFC. It is a fast and incomplete overview of the protocol syntax and behavior.
</para>
<sect1>
<title>SIP syntax</title>
<para>SIP is a text protocol based on utf8 encoding. (making it more readable and easier to debug) SIP describes a syntax for SIP requests, URL, responses and their headers. The full syntax is available at <ulink URL="http://www.columbia.edu/~hgs/">Columbia</ulink> in an augmented BNF form.</para>

<para>The syntax is borrowed from the MAIL and HTTP syntax. 6 types of requests are defined by SIP. The basic available methods are:
</para>
<simplelist>
<member>INVITE</member>
<member>ACK</member>
<member>CANCEL</member>
<member>BYE</member>
<member>INFO</member>
<member>OPTIONS</member>
</simplelist>
<para>As you can see in the BNF definition of request (see rfc2543.txt section 3), SIP is not limited to this short list of methods and includes in its definition the extension-method token. Any other request can be handled by oSIP. NOTIFY and SUBSCRIBE are good examples of new possible methods. These ones are used specifically to provide presence capabilities to your SIP phone without much effort.
</para>
<para>
<example>
<title>INVITE request</title>
<para>INVITE requests are used to initiate and modify sessions. Here, cha from sipworld.net is calling jack at domain atosc.org. This request should be sent to the proxy server managing atosc.org, it will forward the call to jack at his real IP address.</para>
<programlisting>
INVITE sip:jacK@atosc.org SIP/2.0
Via: SIP/2.0/UDP home.sipworld.org
To: sip:jacK@atosc.org
From: sip:cha@sipworld.org
Call-ID: 35778645354@home.sipworld.org
CSeq: 1 INVITE
Contact: sip:cha@home.sipworld.org
Content-type: application/sdp
Content-length: 267

v=0
o=user1 53655765 2353687637 IN IP4 128.3.4.5
s=Mbone Audio
i=Discussion of Mbone Engineering Issues
e=mbone@somewhere.com
c=IN IP4 128.3.4.5
t=0 0
m=audio 3456 RTP/AVP 0
a=rtpmap:0 PCMU/8000
</programlisting>
</example>
</para>
</sect1>
<sect1>
<title>SIP transactions</title>
<para>In order to control sessions, SIP uses transactions. Transactions (INVITE, CANCEL, BYE...) usually result in a modification of a current session. Some other transactions (SUBSCRIBE, NOTIFY...) are not bound to a session. A transaction is composed of one request and its responses (many informational responses and one final response). The following headers: To, From, Call-ID and CSeq are used to identify messages within a transaction.
</para>
<para>As SIP can use unreliable transport protocol (UDP is recommended on the IP network), SIP also defines retransmission rules for messages within a transaction.
</para>
<example>
<title>INVITE transaction</title>
<para>This is the most basic call flow showing the initiation of a session. Only two SIP User Agents (UAC/UAS) are involved. (retransmissions are hidden)
</para>
<programlisting>

	          UAC1               UAS2

	  jacks    |   INVITE         |
	initiate a |----------------->|   Bob's
	  call     |                  | Phone starts
	           |       180 Ringing|   ringing
	           |<-----------------|
	           |       180 Ringing|
        	   |<-----------------|
	           |           200 OK |
	           |<-----------------|
	           |   ACK            |
	           |----------------->|
</programlisting>
</example>
</sect1>
<sect1>
<title>SIP sessions</title>
<para>Transactions are used by user agent as means to control sessions. A session is always initiated by an INVITE. SIP defines a large set of answer codes. A proxy may answer you the well known "404 User Not found" as for an HTTP error. Errors have different levels. A transaction can fail but still proposes new locations to try. Responses from class 3xx serve as redirection mechanism. 4xx, 5xx and 6xx responses are respectively reserved for client error, server error and global failure.
</para>
<example>
<title>A complete session</title>
<para>First, both user agents must send a REGISTER to a registrar. In the following example, the proxy also support registration.</para>
<para>This session is initiated with an INVITE transaction to join jack at home.net. A redirection to jack's office is made by the redirect server of home.net. UA1 understands the redirection and sends a new INVITE towards the real User Agent (UA2) currently used by jack at office.atosc.org. UA2 first rings and jack accepts the call with a 200 OK response. After several minutes, jack and bob want to use their new cameras. The session is modified with an INVITE sent by jack to negotiate new parameters for video. The session is finally ended by bob.
</para>
<programlisting>
         BOB           home.net    Jack (atosc.org)
         UA1            PROXY            UA2
          | REGISTER      |               .
          |-------------->|               .
          |        200 OK |               .
          |<--------------|               .
          .               .               .
later...  .               .               .
          .               .               .
          .               |      REGISTER |
          .               |<--------------|
          .               | 200 OK        |
          .               |-------------->|
          .               .               .
later...  .               .               .
          | INVITE jack@home.net          .
          |-------------->|               .
          |302 Moved temporarily            .
          |<--------------|               .
          | ACK           |               .
          |-------------->|               .
          | INVITE jack@office.atosc.org  |
          | audio                         |
          |------------------------------>|
          |                  180 Ringing  |
          |<------------------------------|
          |                  180 Ringing  |
          |<------------------------------|
          |                       200 OK  |
          |<------------------------------|
          | ACK jack@office.atosc.org     |
          |------------------------------>|
          .                               .
later     .                               .
          .                               .
          |      INVITE bob@bob.home.net  |
          |      audio + video            |
          |<------------------------------|
          |    200 OK                     |
          |------------------------------>|
          |     ACK bob@bob.home.org      |
          |<------------------------------|
          .                               .
later     .                               .
          .                               .
          | BYE jack@office.atosc.org     |
          |------------------------------>|
          |                       200 OK  |
          |<------------------------------|
          |                               |
</programlisting> 
</example>
</sect1>
<sect1>
<title>Server behavior</title>
<para>SIP defines behaviors for proxy, redirect and registrar server. For complete information, please read the RFC...</para>
<para>Usually, a user agent sends its requests to an outbound proxy. As users do not know the current location of their correspondent, they use for the sip url a username and a domain. The outbound proxy (where firewall capabilities can be inserted) uses DNS SRV RECORDS to find servers belonging to the requested domain. Once the server is found, the request is forwarded. This server is the inbound proxy of the correspondent. If the user is available, its application must have registered its location before, so the proxy is now able to forward the request to the real user location. On local network, other standards may be used to find user. (finger,...)</para>

</sect1>
</chapter>
